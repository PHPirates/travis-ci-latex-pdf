name: texlive
on: push

env:
  FILE: pythontex-example

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
      - name: Cache installation
        id: cache-texlive
        uses: actions/cache@v2
        with:
          path: |
            /tmp/texlive
            $HOME/.texlive
          key: ${{ runner.os }}-texlive
      - name: Install and compile
        run: |
          sudo apt-get install python-pygments
          pip3 install numpy
          pip3 list
          which python3 pip3
          cd 4-texlive/
          source ./texlive/texlive_install.sh
          cd ../src
          texliveonfly $FILE.tex
          pythontex --interpreter python:python3 $FILE
          pdflatex $FILE.tex
      - name: Set filename
        id: output_file
        run: |
          echo ::set-output name=OUTPUT_FILE::src/$FILE.pdf
      - name: Upload pdf
        uses: actions/upload-artifact@v2
        with:
          name: pythontex-example.zip
          path: ${{ steps.output_file.outputs.OUTPUT_FILE }}
      - name: Create Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Prepare output path and output name
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        id: prepare_metadata
        # upload-release-asset does not support wildcards or environment variables at the moment
        run: |
          echo ::set-output name=ARTIFACT_PATH::src/$FILE.pdf
          echo ::set-output name=ARTIFACT_NAME::$FILE.pdf
      - name: Upload Release Asset
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.prepare_metadata.outputs.ARTIFACT_PATH }}
          asset_name: ${{ steps.prepare_metadata.outputs.ARTIFACT_NAME }}
          asset_content_type: application/pdf